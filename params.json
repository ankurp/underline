{"name":"Underline.js","tagline":"underline.js is like underscore.js but using modern ES7 syntax","body":"# Underline.js - Underscore.js for modern Javascript\r\n\r\nThe correct way to use underscore.js using modern ES7 functional bind `::` syntax.\r\n\r\n```javascript\r\nimport { map, reduce } from 'underline';\r\n\r\n// Map an array with underline\r\n[1, 2, 3]::map((e) => e * 10));\r\n\r\n// Sum an array using underline\r\n[1, 2, 3]::reduce((a, e) => a + e, 0)\r\n```\r\n\r\nThe way it is currently used now \r\n\r\n```javascript\r\n// Functional way to map using underscore\r\n_.map([1, 2, 3], (e) => e * 10)\r\n\r\n// Functional way to reduce\r\n_.reduce([1, 2, 3], (a, e) => a + e, 0)\r\n```\r\n\r\n**Underline supports chaining without wrapping like underscore**\r\n\r\n```javascript\r\n[1, 2, 3]::map((e) => e * 10)\r\n         ::reduce((a, e) => a + e, 0)\r\n```\r\n\r\n## Usage\r\n\r\nTo get started you will need use [Babel](https://babeljs.io) transpiler with experimental feature [es7.functionBind](http://babeljs.io/blog/2015/05/14/function-bind/#usage) turned on. Then\r\n\r\n1. Install using npm - `npm install --save underline`\r\n2. Import functions needed - `import { map } from 'underline'`\r\n3. Call a function using `::` operator as such `[1, 2, 3]::map((e) => e * 10)`\r\n\r\n## Functional Available\r\n\r\nAll of the functions available in [underscore.js](http://underscorejs.org/) are available in `underline`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}